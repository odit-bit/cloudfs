package component

templ Index(uploadURL, listViewURL string) {
	<!DOCTYPE html>
	<html>
		<head>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<!-- UIkit CSS -->
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/uikit@3.21.7/dist/css/uikit.min.css"/>
			<!-- UIkit JS -->
			<script src="https://cdn.jsdelivr.net/npm/uikit@3.21.7/dist/js/uikit.min.js"></script>
			<script src="https://cdn.jsdelivr.net/npm/uikit@3.21.7/dist/js/uikit-icons.min.js"></script>
			<!--HTMX -->
			<script src="https://unpkg.com/htmx.org@2.0.4" integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+" crossorigin="anonymous"></script>
			<!--hyperscript -->
			<!-- <script src="https://unpkg.com/hyperscript.org@0.9.12"></script> -->
			<style>
				body {
					background-color: #f4f4f4;
					margin-top: 50px;
					justify-content: center;
				}
				h2 {
					text-align: center;
				}
				li {
					float: left;
				}
				li a {
					display: block;
					color: white;
					text-align: center;
					padding: 16px;
					text-decoration: none;
				}
				li a:hover {
					background-color: #111111;
				}
				ul {
					list-style-type: none;
					margin: 0;
					padding: 0;
					overflow: hidden;
					background-color: #333333;
				}
				.upload{
					text-align: center;
					padding: 10px;
					border: 1px solid #ccc;
					margin-top: 20px;
				}
				.result{
					display: flex;
					justify-content: center;
					margin-top: 20px;
				}
				form {
					text-align: center;
					margin-top: 20px;
				}
				/* Modal styles */
				.modal {
					display: none;
					position: fixed;
					top: 50%;
					left: 50%;
					transform: translate(-50%, -50%);
					padding: 20px;
					background-color: #fff;
					border: 1px solid #ccc;
					box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
					z-index: 1000;
				}
				tr.htmx-swapping td {
				opacity: 0;
				transition: opacity 1s ease-out;
				}
			</style>
			<style>
			 	.htmx-indicator{
					display:none;
				}
				.htmx-request .htmx-indicator{
					display:inline;
				}
				.htmx-request.htmx-indicator{
					display:inline;
				}
			</style>
		</head>
		<body>
			<div class="uk-container">
				//UPLOAD
				<div class="uk-text-center uk-position-z-index" uk-sticky="end: !.uk-height-large; offset: 0">
					<form 
					id="uploadForm" 
					hx-encoding="multipart/form-data" 
					hx-post={ uploadURL } 
					hx-target="#responseModal" 
					hx-on::after-request="if(event.detail.successful) this.reset()"
					>
						<input 
							id="inputFile" 
							type="file" 
							name="file" 
						/>
						<label for="fileSize">Total size:</label>
						<output id="fileSize">0</output>
						<button type="submit">upload</button>
						// <button onclick="htmx.trigger('#uploadForm', 'htmx:abort')">Cancel Request</button>
						<progress id="progress" class="htmx-indicator" value="0" max="100"></progress>
					</form>
					<!-- Modal for response -->
					<div class="modal" id="responseModal">
						<p id="responseText"></p>
					</div>
				</div>

				// LIST 
				<div>
					<div hx-get={ listViewURL } hx-trigger="load,newObject from:body" hx-target="#listBody"></div>
					<div id="listBody"></div>
					//return list attribute
				</div>
			</div>

			<script>
			htmx.on('#uploadForm','htmx:xhr:progress', function(evt) {
				htmx.find('#progress').setAttribute('value', evt.detail.loaded/evt.detail.total * 100)
			});

			// add custom Headers
			let fileinput = document.getElementById("inputFile");
			fileinput.addEventListener("change",()=> {
				fileSize = fileinput.files[0].size
				document.getElementById("fileSize").textContent = fileSize
				console.log(fileSize)
			},false);

			document.body.addEventListener('htmx:configRequest', function(event) {
				event.detail.headers['X-File-Size'] = fileSize // add size to header
			});

			// Handle response 
			document.body.addEventListener('htmx:response', function(event) {
				const responseText = event.detail.xhr.responseText.trim();
				const responseModal = document.getElementById('responseModal');
				const responseTextElement = document.getElementById('responseText');


				responseModal.style.display = 'block';

				// Close modal after 3 seconds (adjust as needed)
				setTimeout(function() {
					responseModal.style.display = 'none';
				}, 3000);
			});		
  		  </script>
		</body>
	</html>
}
